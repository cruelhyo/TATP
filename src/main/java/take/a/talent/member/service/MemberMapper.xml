<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="take.a.talent.member.service.MemberMapper">
	
	<resultMap	type="take.a.talent.member.vo.MemberVo" id="MemberVo"> 
		<result property="memberNo" column="member_no "/>
		<result property="memberId" column="member_id" />
		<result property="memberPassword" column="member_password" />
		<result property="memberName" column="member_name" />
		<result property="memberGender" column="member_gender" />
		<result property="memberAge" column="member_age" />
		<result property="memberPhone" column="member_phone" />
		<result property="memberBirthday" column="member_birthday" />
		<result property="memberNickname" column="member_nickname" />
		<result property="memberPoint" column="member_point" />
		<result property="memberAuthority_no" column="member_authority_no" />
		<result property="memberEmail" column="member_email" />
		<result property="memberAgreement" column="member_agreement" />
		<result property="memberSns" column="member_sns" />
		<result property="memberStudentExp" column="member_student_exp" />
		<result property="memberStudentLevel" column="member_student_level" />
		<result property="memberTotalClassApplicationDate" column="member_total_class_application_date" />
		<result property="memberStudentComplimentCard" column="member_student_compliment_card" />
		<result property="memberLoginState" column="member_login_state" />
		<result property="memberMemo" column="member_memo" />
	</resultMap>
	
	 <resultMap	type="take.a.talent.member.vo.JoinMemberVo" id="JoinMemberVo"> 
		<result property="memberId" column="member_id" />
		<result property="memberPassword" column="member_password" />
		<result property="memberName" column="member_name" />
		<result property="memberGender" column="member_gender" />
		<result property="memberPhone" column="member_phone" />
		<result property="memberBirthday" column="member_birthday" />
		<result property="memberNickname" column="member_nickname" />
		<result property="memberEmail" column="member_email" />
		<result property="memberMailagreement" column="member_agreement" />
		<result property="memberNickname" column="member_nickname" />
		<result property="memberHobby" column="member_hobby" />
		<result property="memberMemo" column="member_memo" />
	</resultMap>
	
	<resultMap type="take.a.talent.member.vo.MemberAndAddressVo" id="MemberAndAddressVo">
		<result property="memberId" column="member_id"/>
		<result property="memberPassword" column="member_pw"/>
		<result property="memberName" column="member_name"/>
		<result property="memberNickname" column="member_nickname"/>
		<result property="memberGender" column="member_gender"/>
		<result property="memberBirthday" column="member_birthday"/>
		<result property="memberMailNumber" column="address_mailnumber"/>
		<result property="memberAddress" column="member_address"/>
		<result property="memberPhone" column="member_phone"/>
		<result property="memberEmail" column="member_email"/>
		<result property="memberAgreement" column="member_agreement"/>
	</resultMap>
	
	<resultMap type="take.a.talent.member.vo.AddressAndClassificationVo" id="AddressAndClassificationVo">
		<result property="addressNo" column="address_no"/>
		<result property="memberNo" column="member_no"/>
		<result property="addressClassificationNo" column="address_classification_no"/>
		<result property="addressMailNumber" column="address_mailnumber"/>
		<result property="memberAddress" column="member_address"/>
		<result property="addressClassificationName" column="address_classification_name"/>
	</resultMap>
	
	<resultMap	type="take.a.talent.member.vo.MemberAccountVo" id="MemberAccountVo">
		<result property="teacherAccountNo" column="teacher_account_no"/>
		<result property="bankNo" column="bank_no"/>
		<result property="accountNumber" column="account_number"/>
		<result property="accountHolderName" column="account_holder_name"/>
	</resultMap>
	
	<resultMap	type="take.a.talent.member.vo.MemberPointVo" id="MemberPointVo">
		<result property="memberNo" column="member_no"/>
		<result property="pointChargeNo"  column="point_charge_no"/>
		<result property="pointChargeMoney"  column="point_charge_money"/>
		<result property="pointChargePoint"  column="point_charge_point"/>
		<result property="pointChargeDate"  column="point_charge_date"/>
		<result property="pointChargeShape"  column="point_charge_shape"/>
	</resultMap>
	
	<resultMap type="take.a.talent.member.vo.MemberPointExchangeVo" id="MemberPointExchangeVo">
		<result property="pointExchangeNo" column="point_exchange_no"/>
		<result property="memberNo" column="member_no"/>
		<result property="pointExchangeMoney" column="point_exchange_money"/>
		<result property="pointExchangePoint" column="point_exchange_point"/>
		<result property="pointExchangeDate" column="point_exchange_date"/>
	</resultMap>
	
	
	<!-- 폼에서 입력한 id를 where절에 넣고 DB에 있는 해당 id, pw, 권한을 가져오는 쿼리이다 resultType은 map이다 -->
	<select id="selectMemberTest" resultType="map">
		SELECT 
		m.member_id as member_id
		,m.member_password as member_pw
		,ma.member_authority_name as authority
		FROM member m
		INNER JOIN member_authority ma
		ON m.member_authority_no = ma.member_authority_no
		WHERE m.member_id = #{username};
	</select>
	
	
	<!--회원가입시 아이디 중복체크  -->
	<!-- SELECT EXISTS를 사용하여 중복되는 아이디가 있으면 TRUE, 없으면 FALSE를 반환하므로 resultType도 boolean   -->
	<select id ="idCheck" parameterType="String" resultType="boolean">
		SELECT EXISTS(
		SELECT member_id
		FROM member
		WHERE member_id=#{member_id});
		
	</select> 
	
	<!-- 업데이트시 셀렉트(강사) -->
	<select id="selectForUpdateMember" resultMap="MemberVo">
		SELECT member_name 
		, member_nickname 
		, member_gender 
		, member_birthday 
		, member_phone 
		, member_email
		FROM member
		WHERE member_id = #{memberId};
	</select>
	
	<!--회원가입시 닉네임 중복체크  -->
	<select id ="nicknameCheck" parameterType="String" resultType="boolean">
		SELECT EXISTS(
		SELECT member_nickname
		FROM member
		WHERE member_nickname=#{memberNickname});
		
	</select>
	
	<!-- 업데이트시 닉네임 중복체크 --> 
	<select id ="nicknameCheckForUpdate" parameterType="String" resultType="String">
		SELECT member_nickname
		FROM member
		WHERE member_id=#{memberId};
	</select>
	
	<!-- 회원(학생)업데이트시 셀렉트 -->
	<select id="selectForUpdateMemberForStudent" parameterType="String" resultMap="MemberAndAddressVo">
		SELECT m.member_name
		, m.member_nickname
		, m.member_gender
		, m.member_birthday
		, m.member_phone
		, m.member_email
		, a.address_mailnumber
		, a.member_address
		FROM member m
		INNER JOIN address a
		ON m.member_no = a.member_no
		WHERE m.member_id = #{memberId};
	</select>
	
	<!-- member_no 가져오기 -->
	<select id="selectMemberNo" parameterType="String" resultType="int">
		SELECT member_no
		FROM member
		WHERE member_id = #{memberId};
	</select>
	
	<!-- 회원(강사) 주소리스트 select -->
	<select id="selectAddressListForTeacher" parameterType="int" resultMap="AddressAndClassificationVo">
		SELECT ac.address_classification_name
		, a.address_no
		, a.address_mailnumber
		, a.member_address
		FROM address a
		INNER JOIN address_classification ac
		ON a.address_classification_no = ac.address_classification_no
		WHERE a.member_no = #{memberNo}
		ORDER BY a.address_no DESC;
	</select>
	
	<!-- 회원이 가지고 있는 포인트 가져오기 -->
	<select id="selectMemberPoint" parameterType="int" resultType="int">
		SELECT member_point
		FROM member
		WHERE member_no = #{memberNo};
	</select>
	
	<!-- 최근 한달 회원 포인트 충전 내역 리스트 -->
	<select id="selectPointHistoryList" parameterType="int" resultMap="MemberPointVo">
		SELECT point_charge_money
		, point_charge_point
		, point_charge_date
		FROM point_charge
		WHERE member_no = #{memberNo} 
		AND point_charge_date >= DATE_ADD(NOW(), INTERVAL -1 MONTH);
	</select>
	
	<!-- 최근 한달 포인트 환전 내역 select -->
	<select id="selectPointExchangeList" parameterType="int" resultMap="MemberPointExchangeVo">
		SELECT point_exchange_money
		, point_exchange_point
		, point_exchange_date
		FROM point_exchange
		WHERE member_no = #{memberNo}
		AND point_exchange_date >= DATE_ADD(NOW(), INTERVAL -1 MONTH);
	</select>
	
	<!-- teacher_account_no 가져오는 쿼리 -->
	<select id="selectTeacherAccountNo" parameterType="int" resultType="int">
		SELECT teacher_account_no
		FROM teacher
		WHERE member_no = #{memberNo};
	</select>
	
	<!-- 계좌 수정시 select -->
	<select id="selectTeacherAccountForUpdate" parameterType="int" resultMap="MemberAccountVo">
		SELECT bank_no
		, account_number
		, account_holder_name
		FROM teacher_account
		WHERE teacher_account_no = #{teacherAccountNo};
	</select>
	
	<!-- 회원가입  수정중!!!!! -->
	<insert id="insertMember" parameterType="take.a.talent.member.vo.JoinMemberVo">
		INSERT INTO member(member_id, member_password, member_name, member_gender, member_birthday, member_phone,  member_email, member_agreement, member_hobby, member_nickname)
			VALUES (#{memberId}, #{memberPassword}, #{memberName},#{memberGender}, #{memberBirthday}, #{memberPhone}, 
			#{memberEmail},#{memberMailagreement}, #{memberHobby}, #{memberNickname});
			
	</insert>
	
	<!-- 회원(강사) 주소 insert -->
	<insert id="insertAddressForTeacher" parameterType="take.a.talent.member.vo.AddressAndClassificationVo">
		INSERT INTO 
		address(address_no, member_no, address_classification_no, address_mailnumber, member_address)
		VALUES 
		(
			#{addressNo}
			, #{memberNo}
			, #{addressClassificationNo}
			, #{addressMailNumber}
			, #{memberAddress}
		)
	</insert>

	<!-- 계좌 입력 정보 -->
	<insert id="insertAccount" parameterType="take.a.talent.member.vo.MemberAccountVo">
		INSERT INTO teacher_account 
		(bank_no
		, account_number
		, account_holder_name)
		 VALUES 
		 (#{bankNo}
		 , #{accountNumber}
		 ,#{accountHolderName})
		 <selectKey keyProperty="teacherAccountNo" resultType="int" order="AFTER">
		 	SELECT LAST_INSERT_ID()
		 </selectKey>
	</insert>
	
	<!-- 포인트 입력(충전) -->
	<insert id ="insertPoint" parameterType="take.a.talent.member.vo.MemberPointVo">
		INSERT INTO point_charge 
		(member_no
		, point_charge_money
		, point_charge_point
		, point_charge_date
		, point_charge_shape)
		VALUES 
		(#{memberNo}
		, #{pointChargeMoney}
		, #{pointChargePoint}
		, SYSDATE()
		, #{pointChargeShape});
	</insert>
	
	<!-- 포인트 환전 내역 insert -->
	<insert id="insertPointExchangHistory" parameterType="take.a.talent.member.vo.MemberPointExchangeVo">
		INSERT INTO point_exchange
		(member_no
		, point_exchange_money
		, point_exchange_point
		, point_exchange_date)
		VALUES
		(#{memberNo}
		, #{pointExchangeMoney}
		, #{pointExchangePoint}
		, SYSDATE());
	</insert>
	
	<!-- 충전한 포인트 기존포인트와 계산하여 업데이트 -->
	<update id="updatePointForMember" parameterType="take.a.talent.member.vo.MemberVo">
		UPDATE member
		SET member_point = #{memberPoint}
		WHERE member_no = #{memberNo};
	</update>
	
	<!-- 회원(강사) 정보 수정(비밀번호, 주소 제외) -->	
	<update id="updateMember" parameterType="take.a.talent.member.vo.MemberVo">
		UPDATE member 
		SET member_name = #{memberName}
		, member_nickname = #{memberNickname}
		, member_gender = #{memberGender}
		, member_birthday = #{memberBirthday}
		, member_phone = #{memberPhone}
		, member_email = #{memberEmail}
		WHERE member_id = #{memberId}; 
	</update>

	<!-- 회원(학생) 정보 수정(비밀번호 제외) -->
	<update id="updateMemberForStudent" parameterType="take.a.talent.member.vo.MemberAndAddressVo">
		UPDATE member m
		INNER JOIN address a
		ON  m.member_no = a.member_no
		SET 
		m.member_name = #{memberName}
		, m.member_nickname = #{memberNickname}
		, m.member_gender = #{memberGender}
		, m.member_birthday = #{memberBirthday}
		, m.member_phone = #{memberPhone}
		, m.member_email = #{memberEmail}
		, a.address_mailnumber = #{memberMailNumber}
		, a.member_address = #{memberAddress}
		WHERE m.member_id = #{memberId};
	</update>
	
	<!-- 회원(강사) 주소 업데이트 -->
	<update id="updateAddressForTeacher" parameterType="take.a.talent.member.vo.AddressAndClassificationVo">
		UPDATE address
		SET address_classification_no = #{addressClassificationNo}
		, address_mailnumber = #{addressMailNumber}
		, member_address = #{memberAddress}
		WHERE address_no = #{addressNo};
	</update>
	
	<!-- 계좌등록시 teacher테이블 업데이트 -->
	<update id="updateTeacherWhenInsertAccount" parameterType="take.a.talent.member.vo.TeacherVo">
		UPDATE teacher
		SET teacher_account_no = #{teacherAccountNo}
		WHERE member_no = #{memberNo};
	</update>
	
	<!-- 계좌 업데이트 -->
	<update id="updateTeacherAccount" parameterType="take.a.talent.member.vo.MemberAccountVo">
		UPDATE teacher_account
		SET bank_no = #{bankNo}
		, account_number = #{accountNumber}
		, account_holder_name = #{accountHolderName}
		WHERE teacher_account_no = #{teacherAccountNo};
	</update>
	
	<!-- 회원(강사) 주소 삭제 -->
	<delete id="deleteAddressForTeacher" parameterType="int">
		DELETE
		FROM address
		WHERE address_no = #{addressNo};
	</delete>

</mapper>
  